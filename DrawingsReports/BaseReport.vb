
'*************************************************************************************************************
' MustInherit Class BaseReport - baseclass for all WinFlume reports
'*************************************************************************************************************
Imports WinFlume.BasePage

Public MustInherit Class BaseReport

#Region " Member Data "
    '
    ' Flume & Section data
    '
    Protected mFlume As Flume.FlumeType = Nothing
    Protected mSection As Flume.SectionType = Nothing

#End Region

#Region " Public Properties "
    '
    ' WinFlume's top-level User Interface
    '
    Protected mWinFlumeForm As WinFlumeForm = Nothing
    Public Property WinFlumeForm As WinFlumeForm
        Get
            Return mWinFlumeForm
        End Get
        Set(value As WinFlumeForm)
            mWinFlumeForm = value
        End Set
    End Property
    '
    ' Report pages & graphs
    '
    Protected mReportPages() As RtfPage
    Public ReadOnly Property ReportPages As RtfPage()
        Get
            Return mReportPages
        End Get
    End Property

    Protected mPageTitles() As String
    Public ReadOnly Property PageTitles As String()
        Get
            Return mPageTitles
        End Get
    End Property

    Protected mReportImages() As PictureBox
    Public ReadOnly Property ReportImages As PictureBox()
        Get
            Return mReportImages
        End Get
    End Property

    Public ReadOnly Property NumReportPages As Integer
        Get
            NumReportPages = 0
            If (mReportPages IsNot Nothing) Then
                NumReportPages = mReportPages.Length
            End If
        End Get
    End Property

#End Region

#Region " Protected Properties "
    '
    ' Report Page fields
    '
    Protected Property PageHeader As String = Nothing
    Protected Property PageTitle As String = Nothing
    Protected Property TableHeader As String = Nothing
    Protected Property PageFooter As String = Nothing
    Protected Property PageNumber As String = Nothing

#End Region

#Region " Report Methods "

    '*********************************************************************************************************
    ' MustOverride Sub GenerateReport() - subclass must override to generate its specific report
    '*********************************************************************************************************
    Public MustOverride Sub GenerateReport()

    '*********************************************************************************************************
    ' Function GeneratePage() - generate the specified page for the report
    '
    ' Input(s):     ReportText  - string of all text generated for the report
    '               PageNo      - page number for page to generate
    '
    ' Returns:      String      - page text ready to display in a RichTextBox
    '
    ' A page is generated by concanenating the following segments:
    '   1) Page Header      - BaseReport Property set by report subclass
    '   2) Page Title       -      "         "     "   "    "      "
    '   3) Table Header     -      "         "     "   "    "      "
    '   4) Page Text        - generated from ReportText & PageNo input parameters
    '   5) Page Footer      - BaseReport Property set by report subclass
    '   6) Page Number      -      "         "     "   "    "      "
    '
    ' Note - field 1,2,3,5,6 are optional; they may be Nothing or ""
    '*********************************************************************************************************
    Protected Function GeneratePage(ByVal ReportText As String, ByVal PageNo As Integer) As String
        Dim page As String = ""

        Dim numHdrLines As Integer = SegmentLines(PageHeader)
        Dim numTitleLines As Integer = SegmentLines(PageTitle)
        Dim numTblHdrLines As Integer = SegmentLines(TableHeader)
        Dim numFooterLines As Integer = SegmentLines(PageFooter)
        Dim numNumberLines As Integer = SegmentLines(PageNumber)

        ' Calculate number of lines available for Page Text
        Dim numTextLines As Integer = PortraitHeightLines - numHdrLines - numTitleLines - numTblHdrLines
        If (0 < numFooterLines) Then ' there is a footer and maybe a page number
            numTextLines -= numFooterLines
            If (0 < numNumberLines) Then ' there is also a page number
                numTextLines -= numNumberLines
            End If
            numTextLines += 1                   ' remove blank line after footer/page number
        ElseIf (0 < numNumberLines) Then ' there is a page number but no footer
            numTextLines -= numNumberLines
            numTextLines += 1                   ' remove blank line after page number line
        End If

        ReportText = ReportText.Replace(vbCrLf, vbCr)
        ReportText = ReportText.Replace(vbLf, vbCr)

        Dim lines() As String = ReportText.Split(CChar(vbCr))     ' array of individual lines
        Dim numLines As Integer = lines.Length

        Dim pdx As Integer = numTextLines * (PageNo - 1)            ' Index of 1st line of page text
        If (pdx < numLines) Then

            ' Generate page
            AppendSegment(page, PageHeader)         ' start with page header & title and table header
            page &= vbCrLf & vbCrLf
            AppendSegment(page, CenterText("", PageTitle))
            page &= vbCrLf & vbCrLf
            AppendSegment(page, TableHeader)

            Dim txtLines As Integer = Math.Min(numLines - pdx, numTextLines)

            For ldx As Integer = 0 To txtLines - 1  ' append page text
                page &= lines(pdx + ldx) & vbCrLf
            Next

            If (0 < numFooterLines) Then
                page &= vbCrLf
                AppendSegment(page, PageFooter)     ' end with page footer & number
            End If
            If (0 < numNumberLines) Then
                page &= vbCrLf & vbCrLf
                AppendSegment(page, PageNumber)
            End If

        End If

        Return page
    End Function

    '*********************************************************************************************************
    ' Function SegmentLines() - count of the number of lines (terminator: CrLf) in segment text
    '
    ' Input(s):     SegmentText     - lines of text for a report segment
    '
    ' Returns:      Integer         - count of lines within SegmentText
    '*********************************************************************************************************
    Protected Function SegmentLines(ByVal SegmentText As String) As Integer
        SegmentLines = 0
        If (SegmentText IsNot Nothing) Then
            If Not (SegmentText = "") Then
                SegmentLines = LineCount(SegmentText, CChar(vbCrLf)) + 1
            End If
        End If
    End Function

    '*********************************************************************************************************
    ' Sub AppendSegment() - append segment text, if any, onto page text
    '
    ' Input(s):     PageText        - page text to append segment text onto
    '               SegmentText     - lines of text for a report segment
    '
    ' Output(s):    PageText        - page text with appended segment text
    '*********************************************************************************************************
    Protected Sub AppendSegment(ByRef PageText As String, ByVal SegmentText As String)
        If (SegmentText IsNot Nothing) Then
            If Not (SegmentText = "") Then
                PageText &= SegmentText
            End If
        End If
    End Sub

    '*********************************************************************************************************
    ' Function NewReportPage() - create one RTF page for the report (there may be many pages)
    '
    ' Returns:      RtfPage     - RTF (Rich Text Format) control for diplaying/printing a portrait page
    '*********************************************************************************************************
    Protected Function NewReportPage() As RtfPage

        ' Instantiate a new Results Page
        NewReportPage = New RtfPage With {
            .PageWidth = PortraitPageWidth,
            .PageHeight = PortraitPageLength,
            .TopMargin = PortraitTopMargin,
            .LeftMargin = PortraitLeftMargin,
            .RightMargin = PortraitRightMargin,
            .BottomMargin = PortraitBottomMargin,
            .Location = New Point(LeftOffset, TopOffset)
        }

        If (mWinFlumeForm IsNot Nothing) Then
            NewReportPage.Font = mWinFlumeForm.FixedFont
            NewReportPage.Rtf.Font = mWinFlumeForm.FixedFont
        End If

        ' Add event handler for Mouse Wheel events
        'jls AddHandler page.RtfCtrl.MouseWheel, AddressOf RtfCtrl_MouseWheel

    End Function

    '*********************************************************************************************************
    ' Function ReportHeader() - generate header for each report page
    '
    ' Return:       String      - multi-line (3) header for the top of each report page
    '*********************************************************************************************************
    Public Function ReportHeader() As String
        Dim file As String = My.Resources.File          ' Get localized strings
        Dim user As String = My.Resources.User
        Dim desc As String = My.Resources.Desc
        Dim revision As String = My.Resources.Revision

        ' Max character for file name/path
        Dim maxFilenameChars As Integer = PortraitWidthChars - file.Length - revision.Length - 12

        ' WinFlume name & version
        Dim version As String = WinFlumeForm.WinFlumeName() & " " & WinFlumeForm.WinFlumeVersion()
        Dim username As String = WinFlumeForm.Username.Trim

        With mFlume
            ' Line 1 - User Name, WinFlume Version, Date/Time
            Dim line1 As String = Trim(user & ": " & username)
            line1 = CenterText(line1, version)
            line1 = RightJustifyText(line1, Date.Now.ToString("g"))

            ' Line 2 - File Name/Path, Revision #
            Dim filePath As String = Trim(.FlumeName)
            filePath = ShortenedFilepath(filePath, maxFilenameChars)

            Dim line2 As String = Trim(file & ": " & filePath)
            line2 = RightJustifyText(line2, Trim(revision & ": " & .Revision))

            ' Line 3 - WinFlume project description
            Dim line3 As String = Trim(desc & ": " & .Description)

            ReportHeader = line1 & vbCrLf & line2 & vbCrLf & line3
        End With

    End Function

    '*********************************************************************************************************
    ' Function CenterText()       - center text within line
    ' Function RightJustifyText() - right-justify text within line
    '
    ' Input(s):     Line        - line to add text to
    '               Text        - text to add/position within line
    '
    ' Returns:      String      - line with positioned text
    '*********************************************************************************************************
    Public Function CenterText(ByVal Line As String, ByVal Text As String) As String
        CenterText = Line

        If ((Line IsNot Nothing) And (Text IsNot Nothing)) Then
            Dim cdx As Integer = CInt((PortraitWidthChars - Text.Length) / 2)   ' start of centered text
            If (cdx <= Line.Length) Then
                CenterText &= " "
            Else
                CenterText &= StrDup(cdx - Line.Length, " ")                    ' add spaces to center
            End If

            CenterText &= Text                                                  ' center text
        End If
    End Function

    Public Function RightJustifyText(ByVal Line As String, ByVal Text As String) As String
        RightJustifyText = Line

        If ((Line IsNot Nothing) And (Text IsNot Nothing)) Then
            Dim rdx As Integer = PortraitWidthChars - Text.Length       ' start of right-justified text
            If (rdx <= Line.Length) Then
                RightJustifyText &= " "
            Else
                RightJustifyText &= StrDup(rdx - Line.Length + 1, " ")  ' add spaces to right-justify
            End If

            RightJustifyText &= Text                                    ' right-justify text
        End If
    End Function

    '*********************************************************************************************************
    ' Function ShortenedFilepath() - shorten filename/path to fit within Width
    '
    ' Input(s):     Filepath        - filepath string
    '               Width           - maximum width available for filepath
    '
    ' Returns:      String          ' shortened, if necessary, Filepath string
    '*********************************************************************************************************
    Public Function ShortenedFilepath(ByVal Filepath As String, ByVal Width As Integer) As String
        ShortenedFilepath = Filepath

        If (Width < Filepath.Length) Then ' Filepath needs to be shortened
            ' Parse filepath into its drive/folder/filename hierarchy
            Dim fields() As String = Filepath.Split("\".ToCharArray)
            Dim numFields As Integer = fields.Length

            If (1 < numFields) Then
                ' Re-generate path from filename up, as room permits
                ShortenedFilepath = "\" & fields.Last ' start with filename

                While (ShortenedFilepath.Length < Width - 3) ' leave room for '...'
                    For fdx As Integer = numFields - 2 To 0 Step -1 ' prepend from filename up to drive
                        If (ShortenedFilepath.Length + fields(fdx).Length + 1 < Width - 3) Then
                            ' prepend next folder up the hierarchy
                            ShortenedFilepath = "\" & fields(fdx) & ShortenedFilepath
                        Else
                            Exit While
                        End If
                    Next
                End While

                ShortenedFilepath = "..." & ShortenedFilepath
            End If
        End If
    End Function

#End Region

End Class
